name: {{cookiecutter.project_slug}} CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: {{cookiecutter.database_version}}
        env:
          POSTGRES_DB: db_test
          POSTGRES_PASSWORD: db_test_pwd_ci
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Dockerfile linter using Hadolint
        uses: jbergstroem/hadolint-gh-action@v1

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "{{cookiecutter.python_version}}"
          {% if cookiecutter.package_manager != "poetry" %}cache: pip{% endif %}

{% if cookiecutter.package_manager == "poetry" %}
      - name: Install dependencies (using poetry)
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          poetry install
{% else %}
      - name: Install dependencies (using requirements)
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-dev.txt
{% endif %}
      - name: Run Python Linter
        run: {% if cookiecutter.package_manager == "poetry" %}poetry run {% endif %}flake8

      - name: Run backend Tests
        env:
          DATABASE_URL: postgres://postgres:db_test_pwd_ci@localhost:5432/db_test
        run: {% if cookiecutter.package_manager == "poetry" %}poetry run {% endif %}pytest --cache-clear
